// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  GRADUATED
  ENROLLED
}

enum Role {
  ADMIN
  STUDENT
}

enum Program {
  REGULAR
  INTERNATIONAL
  HEALTH_DATA_SCIENCE
  RESFENTIAL_COLLEGE
}

enum CommunitiesStatus {
  PUBLIC
  PRIVATE
}

model User {
  id        String     @id @default(uuid())
  studentid String     @unique
  name      String
  email     String     @unique
  phone     String?    @unique
  program   Program    @default(REGULAR)
  password  String
  image     String?
  touched   Boolean    @default(false) // record if user has logged in for the first time
  role      Role       @default(STUDENT)
  student   UserStatus @default(ENROLLED)

  // Blog                      Blog[]
  ConversationsParticipants ConversationsParticipants[]
  Message                   Message[]
  Communities               Communities[]
  Post                      Post[]
  Comment                   Comment[]
  Replay                    Replay[]
}

model Communities {
  id        String            @id @default(uuid())
  userId    String
  name      String
  status    CommunitiesStatus @default(PUBLIC)
  createdAt DateTime          @default(now())

  owner User   @relation(fields: [userId], references: [id])
  Post  Post[]
}

model Topic {
  id   String @id @default(uuid())
  name String

  Post Post[]
}

model Post {
  id            String   @id @default(uuid())
  content       String   @db.Text
  userId        String
  communitiesId String
  topicId       String
  likes         Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user       User        @relation(fields: [userId], references: [id])
  comunities Communities @relation(fields: [communitiesId], references: [id])
  topic      Topic       @relation(fields: [topicId], references: [id])
  Comment    Comment[]
}

model Comment {
  id        String   @id @default(uuid())
  postId    String
  userId    String
  content   String   @db.Text
  likes     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post   Post     @relation(fields: [postId], references: [id])
  user   User     @relation(fields: [userId], references: [id])
  Replay Replay[]
}

model Replay {
  id        String   @id @default(uuid())
  commentId String
  userId    String
  content   String   @db.Text
  likes     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  comment Comment @relation(fields: [commentId], references: [id])
  user    User    @relation(fields: [userId], references: [id])
}

model Conversations {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ConversationsParticipants ConversationsParticipants[]
  Message                   Message[]
}

model ConversationsParticipants {
  id             String   @id @default(uuid())
  conversationId String
  participantId  String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  conversation Conversations @relation(fields: [conversationId], references: [id])
  participant  User          @relation(fields: [participantId], references: [id])
}

model Message {
  id             String  @id @default(uuid())
  conversationId String
  authorId       String
  content        String  @db.Text
  read           Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  conversation Conversations @relation(fields: [conversationId], references: [id])
  author       User          @relation(fields: [authorId], references: [id])
}
